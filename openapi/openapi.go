// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CredentialIssuanceRequest defines model for CredentialIssuanceRequest.
type CredentialIssuanceRequest struct {
	Credential CredentialIssuanceRequestCredential `json:"credential"`
	Options    CredentialIssuanceRequestOptions    `json:"options"`
}

// CredentialIssuanceRequestCredential defines model for CredentialIssuanceRequestCredential.
type CredentialIssuanceRequestCredential struct {
	Context           []string          `json:"@context"`
	CredentialSubject CredentialSubject `json:"credentialSubject"`
	ExpirationDate    string            `json:"expirationDate"`
	Id                string            `json:"id"`
	IssuanceDate      string            `json:"issuanceDate"`
	Issuer            CredentialIssuer  `json:"issuer"`
	Type              []string          `json:"type"`
}

// CredentialIssuanceRequestOptions defines model for CredentialIssuanceRequestOptions.
type CredentialIssuanceRequestOptions struct {
	Challenge        string           `json:"challenge"`
	Created          string           `json:"created"`
	CredentialStatus CredentialStatus `json:"credentialStatus"`
	Domain           string           `json:"domain"`
}

// CredentialIssuanceResponse defines model for CredentialIssuanceResponse.
type CredentialIssuanceResponse struct {
	VerifiableCredential StringEncodedData `json:"verifiableCredential"`
}

// CredentialIssuer defines model for CredentialIssuer.
type CredentialIssuer struct {
	Id string `json:"id"`
}

// CredentialStatus defines model for CredentialStatus.
type CredentialStatus struct {
	Type string `json:"type"`
}

// CredentialSubject defines model for CredentialSubject.
type CredentialSubject map[string]interface{}

// DIDIonCreateResponse defines model for DIDIonCreateResponse.
type DIDIonCreateResponse struct {
	Did string `json:"did"`
}

// StringEncodedData defines model for StringEncodedData.
type StringEncodedData struct {
	Data string `json:"data"`
}

// TestServerID defines model for TestServerID.
type TestServerID struct {
	Language string `json:"language"`
	Name     string `json:"name"`
	Url      string `json:"url"`
}

// CredentialIssueJSONRequestBody defines body for CredentialIssue for application/json ContentType.
type CredentialIssueJSONRequestBody = CredentialIssuanceRequest

// EncodersBase58DecodeJSONRequestBody defines body for EncodersBase58Decode for application/json ContentType.
type EncodersBase58DecodeJSONRequestBody = StringEncodedData

// EncodersBase58EncodeJSONRequestBody defines body for EncodersBase58Encode for application/json ContentType.
type EncodersBase58EncodeJSONRequestBody = StringEncodedData

// EncodersBase64DecodeJSONRequestBody defines body for EncodersBase64Decode for application/json ContentType.
type EncodersBase64DecodeJSONRequestBody = StringEncodedData

// EncodersBase64EncodeJSONRequestBody defines body for EncodersBase64Encode for application/json ContentType.
type EncodersBase64EncodeJSONRequestBody = StringEncodedData

// EncodersCborDecodeJSONRequestBody defines body for EncodersCborDecode for application/json ContentType.
type EncodersCborDecodeJSONRequestBody = StringEncodedData

// EncodersCborEncodeJSONRequestBody defines body for EncodersCborEncode for application/json ContentType.
type EncodersCborEncodeJSONRequestBody = StringEncodedData

// EncodersSha256EncodeJSONRequestBody defines body for EncodersSha256Encode for application/json ContentType.
type EncodersSha256EncodeJSONRequestBody = StringEncodedData

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// IdentifySelf request
	IdentifySelf(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialIssueWithBody request with any body
	CredentialIssueWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CredentialIssue(ctx context.Context, body CredentialIssueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialPresentationExchange request
	CredentialPresentationExchange(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CryptoGenerateKeyEd25519 request
	CryptoGenerateKeyEd25519(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CryptoGenerateKeySecp256k1 request
	CryptoGenerateKeySecp256k1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CryptoGenerateKeySecp256r1 request
	CryptoGenerateKeySecp256r1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CryptoJoseJwkDecode request
	CryptoJoseJwkDecode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CryptoJoseJwkEncode request
	CryptoJoseJwkEncode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CryptoJoseJwsCreate request
	CryptoJoseJwsCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CryptoJoseJwsVerify request
	CryptoJoseJwsVerify(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CryptoJoseJwtCreate request
	CryptoJoseJwtCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CryptoJoseJwtVerify request
	CryptoJoseJwtVerify(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CryptoKeyManagerGenerateKey request
	CryptoKeyManagerGenerateKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CryptoKeyManagerImportKey request
	CryptoKeyManagerImportKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CryptoKeyManagerSign request
	CryptoKeyManagerSign(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CryptoKeyManagerVerify request
	CryptoKeyManagerVerify(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CryptoVerifyEd25519 request
	CryptoVerifyEd25519(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CryptoVerifySecp256k1 request
	CryptoVerifySecp256k1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CryptoVerifySecp256r1 request
	CryptoVerifySecp256r1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DidIonAnchor request
	DidIonAnchor(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DidIonCreate request
	DidIonCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DidIonDeactivate request
	DidIonDeactivate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DidIonRecover request
	DidIonRecover(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DidIonResolve request
	DidIonResolve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DidIonUpdate request
	DidIonUpdate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DidKeyCreate request
	DidKeyCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DidKeyResolve request
	DidKeyResolve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EncodersBase58DecodeWithBody request with any body
	EncodersBase58DecodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EncodersBase58Decode(ctx context.Context, body EncodersBase58DecodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EncodersBase58EncodeWithBody request with any body
	EncodersBase58EncodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EncodersBase58Encode(ctx context.Context, body EncodersBase58EncodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EncodersBase64DecodeWithBody request with any body
	EncodersBase64DecodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EncodersBase64Decode(ctx context.Context, body EncodersBase64DecodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EncodersBase64EncodeWithBody request with any body
	EncodersBase64EncodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EncodersBase64Encode(ctx context.Context, body EncodersBase64EncodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EncodersCborDecodeWithBody request with any body
	EncodersCborDecodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EncodersCborDecode(ctx context.Context, body EncodersCborDecodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EncodersCborEncodeWithBody request with any body
	EncodersCborEncodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EncodersCborEncode(ctx context.Context, body EncodersCborEncodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EncodersSha256EncodeWithBody request with any body
	EncodersSha256EncodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EncodersSha256Encode(ctx context.Context, body EncodersSha256EncodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServerReady request
	ServerReady(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServerShutdown request
	ServerShutdown(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) IdentifySelf(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdentifySelfRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialIssueWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialIssueRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialIssue(ctx context.Context, body CredentialIssueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialIssueRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialPresentationExchange(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialPresentationExchangeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CryptoGenerateKeyEd25519(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCryptoGenerateKeyEd25519Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CryptoGenerateKeySecp256k1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCryptoGenerateKeySecp256k1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CryptoGenerateKeySecp256r1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCryptoGenerateKeySecp256r1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CryptoJoseJwkDecode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCryptoJoseJwkDecodeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CryptoJoseJwkEncode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCryptoJoseJwkEncodeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CryptoJoseJwsCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCryptoJoseJwsCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CryptoJoseJwsVerify(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCryptoJoseJwsVerifyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CryptoJoseJwtCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCryptoJoseJwtCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CryptoJoseJwtVerify(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCryptoJoseJwtVerifyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CryptoKeyManagerGenerateKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCryptoKeyManagerGenerateKeyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CryptoKeyManagerImportKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCryptoKeyManagerImportKeyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CryptoKeyManagerSign(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCryptoKeyManagerSignRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CryptoKeyManagerVerify(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCryptoKeyManagerVerifyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CryptoVerifyEd25519(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCryptoVerifyEd25519Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CryptoVerifySecp256k1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCryptoVerifySecp256k1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CryptoVerifySecp256r1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCryptoVerifySecp256r1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DidIonAnchor(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDidIonAnchorRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DidIonCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDidIonCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DidIonDeactivate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDidIonDeactivateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DidIonRecover(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDidIonRecoverRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DidIonResolve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDidIonResolveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DidIonUpdate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDidIonUpdateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DidKeyCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDidKeyCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DidKeyResolve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDidKeyResolveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EncodersBase58DecodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEncodersBase58DecodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EncodersBase58Decode(ctx context.Context, body EncodersBase58DecodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEncodersBase58DecodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EncodersBase58EncodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEncodersBase58EncodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EncodersBase58Encode(ctx context.Context, body EncodersBase58EncodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEncodersBase58EncodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EncodersBase64DecodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEncodersBase64DecodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EncodersBase64Decode(ctx context.Context, body EncodersBase64DecodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEncodersBase64DecodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EncodersBase64EncodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEncodersBase64EncodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EncodersBase64Encode(ctx context.Context, body EncodersBase64EncodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEncodersBase64EncodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EncodersCborDecodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEncodersCborDecodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EncodersCborDecode(ctx context.Context, body EncodersCborDecodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEncodersCborDecodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EncodersCborEncodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEncodersCborEncodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EncodersCborEncode(ctx context.Context, body EncodersCborEncodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEncodersCborEncodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EncodersSha256EncodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEncodersSha256EncodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EncodersSha256Encode(ctx context.Context, body EncodersSha256EncodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEncodersSha256EncodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServerReady(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServerReadyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServerShutdown(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServerShutdownRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewIdentifySelfRequest generates requests for IdentifySelf
func NewIdentifySelfRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCredentialIssueRequest calls the generic CredentialIssue builder with application/json body
func NewCredentialIssueRequest(server string, body CredentialIssueJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCredentialIssueRequestWithBody(server, "application/json", bodyReader)
}

// NewCredentialIssueRequestWithBody generates requests for CredentialIssue with any type of body
func NewCredentialIssueRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credentials/issue")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCredentialPresentationExchangeRequest generates requests for CredentialPresentationExchange
func NewCredentialPresentationExchangeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credentials/presentation-exchange")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCryptoGenerateKeyEd25519Request generates requests for CryptoGenerateKeyEd25519
func NewCryptoGenerateKeyEd25519Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crypto/generate-key/ed25519")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCryptoGenerateKeySecp256k1Request generates requests for CryptoGenerateKeySecp256k1
func NewCryptoGenerateKeySecp256k1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crypto/generate-key/secp256k1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCryptoGenerateKeySecp256r1Request generates requests for CryptoGenerateKeySecp256r1
func NewCryptoGenerateKeySecp256r1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crypto/generate-key/secp256r1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCryptoJoseJwkDecodeRequest generates requests for CryptoJoseJwkDecode
func NewCryptoJoseJwkDecodeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crypto/jose/jwk-decode")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCryptoJoseJwkEncodeRequest generates requests for CryptoJoseJwkEncode
func NewCryptoJoseJwkEncodeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crypto/jose/jwk-encode")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCryptoJoseJwsCreateRequest generates requests for CryptoJoseJwsCreate
func NewCryptoJoseJwsCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crypto/jose/jws-create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCryptoJoseJwsVerifyRequest generates requests for CryptoJoseJwsVerify
func NewCryptoJoseJwsVerifyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crypto/jose/jws-verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCryptoJoseJwtCreateRequest generates requests for CryptoJoseJwtCreate
func NewCryptoJoseJwtCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crypto/jose/jwt-create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCryptoJoseJwtVerifyRequest generates requests for CryptoJoseJwtVerify
func NewCryptoJoseJwtVerifyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crypto/jose/jwt-verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCryptoKeyManagerGenerateKeyRequest generates requests for CryptoKeyManagerGenerateKey
func NewCryptoKeyManagerGenerateKeyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crypto/key-manager/generate-key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCryptoKeyManagerImportKeyRequest generates requests for CryptoKeyManagerImportKey
func NewCryptoKeyManagerImportKeyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crypto/key-manager/import-key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCryptoKeyManagerSignRequest generates requests for CryptoKeyManagerSign
func NewCryptoKeyManagerSignRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crypto/key-manager/sign")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCryptoKeyManagerVerifyRequest generates requests for CryptoKeyManagerVerify
func NewCryptoKeyManagerVerifyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crypto/key-manager/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCryptoVerifyEd25519Request generates requests for CryptoVerifyEd25519
func NewCryptoVerifyEd25519Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crypto/verify/ed25519")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCryptoVerifySecp256k1Request generates requests for CryptoVerifySecp256k1
func NewCryptoVerifySecp256k1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crypto/verify/secp256k1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCryptoVerifySecp256r1Request generates requests for CryptoVerifySecp256r1
func NewCryptoVerifySecp256r1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crypto/verify/secp256r1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDidIonAnchorRequest generates requests for DidIonAnchor
func NewDidIonAnchorRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/did-ion/anchor")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDidIonCreateRequest generates requests for DidIonCreate
func NewDidIonCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/did-ion/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDidIonDeactivateRequest generates requests for DidIonDeactivate
func NewDidIonDeactivateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/did-ion/deactivate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDidIonRecoverRequest generates requests for DidIonRecover
func NewDidIonRecoverRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/did-ion/recover")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDidIonResolveRequest generates requests for DidIonResolve
func NewDidIonResolveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/did-ion/resolve")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDidIonUpdateRequest generates requests for DidIonUpdate
func NewDidIonUpdateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/did-ion/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDidKeyCreateRequest generates requests for DidKeyCreate
func NewDidKeyCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/did-key/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDidKeyResolveRequest generates requests for DidKeyResolve
func NewDidKeyResolveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/did-key/resolve")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEncodersBase58DecodeRequest calls the generic EncodersBase58Decode builder with application/json body
func NewEncodersBase58DecodeRequest(server string, body EncodersBase58DecodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEncodersBase58DecodeRequestWithBody(server, "application/json", bodyReader)
}

// NewEncodersBase58DecodeRequestWithBody generates requests for EncodersBase58Decode with any type of body
func NewEncodersBase58DecodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/encoders/base58/decode")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEncodersBase58EncodeRequest calls the generic EncodersBase58Encode builder with application/json body
func NewEncodersBase58EncodeRequest(server string, body EncodersBase58EncodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEncodersBase58EncodeRequestWithBody(server, "application/json", bodyReader)
}

// NewEncodersBase58EncodeRequestWithBody generates requests for EncodersBase58Encode with any type of body
func NewEncodersBase58EncodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/encoders/base58/encode")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEncodersBase64DecodeRequest calls the generic EncodersBase64Decode builder with application/json body
func NewEncodersBase64DecodeRequest(server string, body EncodersBase64DecodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEncodersBase64DecodeRequestWithBody(server, "application/json", bodyReader)
}

// NewEncodersBase64DecodeRequestWithBody generates requests for EncodersBase64Decode with any type of body
func NewEncodersBase64DecodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/encoders/base64/decode")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEncodersBase64EncodeRequest calls the generic EncodersBase64Encode builder with application/json body
func NewEncodersBase64EncodeRequest(server string, body EncodersBase64EncodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEncodersBase64EncodeRequestWithBody(server, "application/json", bodyReader)
}

// NewEncodersBase64EncodeRequestWithBody generates requests for EncodersBase64Encode with any type of body
func NewEncodersBase64EncodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/encoders/base64/encode")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEncodersCborDecodeRequest calls the generic EncodersCborDecode builder with application/json body
func NewEncodersCborDecodeRequest(server string, body EncodersCborDecodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEncodersCborDecodeRequestWithBody(server, "application/json", bodyReader)
}

// NewEncodersCborDecodeRequestWithBody generates requests for EncodersCborDecode with any type of body
func NewEncodersCborDecodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/encoders/cbor/decode")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEncodersCborEncodeRequest calls the generic EncodersCborEncode builder with application/json body
func NewEncodersCborEncodeRequest(server string, body EncodersCborEncodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEncodersCborEncodeRequestWithBody(server, "application/json", bodyReader)
}

// NewEncodersCborEncodeRequestWithBody generates requests for EncodersCborEncode with any type of body
func NewEncodersCborEncodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/encoders/cbor/encode")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEncodersSha256EncodeRequest calls the generic EncodersSha256Encode builder with application/json body
func NewEncodersSha256EncodeRequest(server string, body EncodersSha256EncodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEncodersSha256EncodeRequestWithBody(server, "application/json", bodyReader)
}

// NewEncodersSha256EncodeRequestWithBody generates requests for EncodersSha256Encode with any type of body
func NewEncodersSha256EncodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/encoders/sha256/encode")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewServerReadyRequest generates requests for ServerReady
func NewServerReadyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ready")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewServerShutdownRequest generates requests for ServerShutdown
func NewServerShutdownRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shutdown")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// IdentifySelfWithResponse request
	IdentifySelfWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IdentifySelfResponse, error)

	// CredentialIssueWithBodyWithResponse request with any body
	CredentialIssueWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CredentialIssueResponse, error)

	CredentialIssueWithResponse(ctx context.Context, body CredentialIssueJSONRequestBody, reqEditors ...RequestEditorFn) (*CredentialIssueResponse, error)

	// CredentialPresentationExchangeWithResponse request
	CredentialPresentationExchangeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CredentialPresentationExchangeResponse, error)

	// CryptoGenerateKeyEd25519WithResponse request
	CryptoGenerateKeyEd25519WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoGenerateKeyEd25519Response, error)

	// CryptoGenerateKeySecp256k1WithResponse request
	CryptoGenerateKeySecp256k1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoGenerateKeySecp256k1Response, error)

	// CryptoGenerateKeySecp256r1WithResponse request
	CryptoGenerateKeySecp256r1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoGenerateKeySecp256r1Response, error)

	// CryptoJoseJwkDecodeWithResponse request
	CryptoJoseJwkDecodeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoJoseJwkDecodeResponse, error)

	// CryptoJoseJwkEncodeWithResponse request
	CryptoJoseJwkEncodeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoJoseJwkEncodeResponse, error)

	// CryptoJoseJwsCreateWithResponse request
	CryptoJoseJwsCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoJoseJwsCreateResponse, error)

	// CryptoJoseJwsVerifyWithResponse request
	CryptoJoseJwsVerifyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoJoseJwsVerifyResponse, error)

	// CryptoJoseJwtCreateWithResponse request
	CryptoJoseJwtCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoJoseJwtCreateResponse, error)

	// CryptoJoseJwtVerifyWithResponse request
	CryptoJoseJwtVerifyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoJoseJwtVerifyResponse, error)

	// CryptoKeyManagerGenerateKeyWithResponse request
	CryptoKeyManagerGenerateKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoKeyManagerGenerateKeyResponse, error)

	// CryptoKeyManagerImportKeyWithResponse request
	CryptoKeyManagerImportKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoKeyManagerImportKeyResponse, error)

	// CryptoKeyManagerSignWithResponse request
	CryptoKeyManagerSignWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoKeyManagerSignResponse, error)

	// CryptoKeyManagerVerifyWithResponse request
	CryptoKeyManagerVerifyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoKeyManagerVerifyResponse, error)

	// CryptoVerifyEd25519WithResponse request
	CryptoVerifyEd25519WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoVerifyEd25519Response, error)

	// CryptoVerifySecp256k1WithResponse request
	CryptoVerifySecp256k1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoVerifySecp256k1Response, error)

	// CryptoVerifySecp256r1WithResponse request
	CryptoVerifySecp256r1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoVerifySecp256r1Response, error)

	// DidIonAnchorWithResponse request
	DidIonAnchorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DidIonAnchorResponse, error)

	// DidIonCreateWithResponse request
	DidIonCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DidIonCreateResponse, error)

	// DidIonDeactivateWithResponse request
	DidIonDeactivateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DidIonDeactivateResponse, error)

	// DidIonRecoverWithResponse request
	DidIonRecoverWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DidIonRecoverResponse, error)

	// DidIonResolveWithResponse request
	DidIonResolveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DidIonResolveResponse, error)

	// DidIonUpdateWithResponse request
	DidIonUpdateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DidIonUpdateResponse, error)

	// DidKeyCreateWithResponse request
	DidKeyCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DidKeyCreateResponse, error)

	// DidKeyResolveWithResponse request
	DidKeyResolveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DidKeyResolveResponse, error)

	// EncodersBase58DecodeWithBodyWithResponse request with any body
	EncodersBase58DecodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EncodersBase58DecodeResponse, error)

	EncodersBase58DecodeWithResponse(ctx context.Context, body EncodersBase58DecodeJSONRequestBody, reqEditors ...RequestEditorFn) (*EncodersBase58DecodeResponse, error)

	// EncodersBase58EncodeWithBodyWithResponse request with any body
	EncodersBase58EncodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EncodersBase58EncodeResponse, error)

	EncodersBase58EncodeWithResponse(ctx context.Context, body EncodersBase58EncodeJSONRequestBody, reqEditors ...RequestEditorFn) (*EncodersBase58EncodeResponse, error)

	// EncodersBase64DecodeWithBodyWithResponse request with any body
	EncodersBase64DecodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EncodersBase64DecodeResponse, error)

	EncodersBase64DecodeWithResponse(ctx context.Context, body EncodersBase64DecodeJSONRequestBody, reqEditors ...RequestEditorFn) (*EncodersBase64DecodeResponse, error)

	// EncodersBase64EncodeWithBodyWithResponse request with any body
	EncodersBase64EncodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EncodersBase64EncodeResponse, error)

	EncodersBase64EncodeWithResponse(ctx context.Context, body EncodersBase64EncodeJSONRequestBody, reqEditors ...RequestEditorFn) (*EncodersBase64EncodeResponse, error)

	// EncodersCborDecodeWithBodyWithResponse request with any body
	EncodersCborDecodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EncodersCborDecodeResponse, error)

	EncodersCborDecodeWithResponse(ctx context.Context, body EncodersCborDecodeJSONRequestBody, reqEditors ...RequestEditorFn) (*EncodersCborDecodeResponse, error)

	// EncodersCborEncodeWithBodyWithResponse request with any body
	EncodersCborEncodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EncodersCborEncodeResponse, error)

	EncodersCborEncodeWithResponse(ctx context.Context, body EncodersCborEncodeJSONRequestBody, reqEditors ...RequestEditorFn) (*EncodersCborEncodeResponse, error)

	// EncodersSha256EncodeWithBodyWithResponse request with any body
	EncodersSha256EncodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EncodersSha256EncodeResponse, error)

	EncodersSha256EncodeWithResponse(ctx context.Context, body EncodersSha256EncodeJSONRequestBody, reqEditors ...RequestEditorFn) (*EncodersSha256EncodeResponse, error)

	// ServerReadyWithResponse request
	ServerReadyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ServerReadyResponse, error)

	// ServerShutdownWithResponse request
	ServerShutdownWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ServerShutdownResponse, error)
}

type IdentifySelfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestServerID
}

// Status returns HTTPResponse.Status
func (r IdentifySelfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IdentifySelfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialIssueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialIssuanceResponse
}

// Status returns HTTPResponse.Status
func (r CredentialIssueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialIssueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialPresentationExchangeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CredentialPresentationExchangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialPresentationExchangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CryptoGenerateKeyEd25519Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CryptoGenerateKeyEd25519Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CryptoGenerateKeyEd25519Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CryptoGenerateKeySecp256k1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CryptoGenerateKeySecp256k1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CryptoGenerateKeySecp256k1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CryptoGenerateKeySecp256r1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CryptoGenerateKeySecp256r1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CryptoGenerateKeySecp256r1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CryptoJoseJwkDecodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CryptoJoseJwkDecodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CryptoJoseJwkDecodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CryptoJoseJwkEncodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CryptoJoseJwkEncodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CryptoJoseJwkEncodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CryptoJoseJwsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CryptoJoseJwsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CryptoJoseJwsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CryptoJoseJwsVerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CryptoJoseJwsVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CryptoJoseJwsVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CryptoJoseJwtCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CryptoJoseJwtCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CryptoJoseJwtCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CryptoJoseJwtVerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CryptoJoseJwtVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CryptoJoseJwtVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CryptoKeyManagerGenerateKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CryptoKeyManagerGenerateKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CryptoKeyManagerGenerateKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CryptoKeyManagerImportKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CryptoKeyManagerImportKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CryptoKeyManagerImportKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CryptoKeyManagerSignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CryptoKeyManagerSignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CryptoKeyManagerSignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CryptoKeyManagerVerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CryptoKeyManagerVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CryptoKeyManagerVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CryptoVerifyEd25519Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CryptoVerifyEd25519Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CryptoVerifyEd25519Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CryptoVerifySecp256k1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CryptoVerifySecp256k1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CryptoVerifySecp256k1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CryptoVerifySecp256r1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CryptoVerifySecp256r1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CryptoVerifySecp256r1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DidIonAnchorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DidIonAnchorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DidIonAnchorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DidIonCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DIDIonCreateResponse
}

// Status returns HTTPResponse.Status
func (r DidIonCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DidIonCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DidIonDeactivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DidIonDeactivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DidIonDeactivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DidIonRecoverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DidIonRecoverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DidIonRecoverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DidIonResolveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DidIonResolveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DidIonResolveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DidIonUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DidIonUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DidIonUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DidKeyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DidKeyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DidKeyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DidKeyResolveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DidKeyResolveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DidKeyResolveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EncodersBase58DecodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StringEncodedData
}

// Status returns HTTPResponse.Status
func (r EncodersBase58DecodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EncodersBase58DecodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EncodersBase58EncodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StringEncodedData
}

// Status returns HTTPResponse.Status
func (r EncodersBase58EncodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EncodersBase58EncodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EncodersBase64DecodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StringEncodedData
}

// Status returns HTTPResponse.Status
func (r EncodersBase64DecodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EncodersBase64DecodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EncodersBase64EncodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StringEncodedData
}

// Status returns HTTPResponse.Status
func (r EncodersBase64EncodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EncodersBase64EncodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EncodersCborDecodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StringEncodedData
}

// Status returns HTTPResponse.Status
func (r EncodersCborDecodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EncodersCborDecodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EncodersCborEncodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StringEncodedData
}

// Status returns HTTPResponse.Status
func (r EncodersCborEncodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EncodersCborEncodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EncodersSha256EncodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StringEncodedData
}

// Status returns HTTPResponse.Status
func (r EncodersSha256EncodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EncodersSha256EncodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServerReadyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ServerReadyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServerReadyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServerShutdownResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ServerShutdownResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServerShutdownResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// IdentifySelfWithResponse request returning *IdentifySelfResponse
func (c *ClientWithResponses) IdentifySelfWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IdentifySelfResponse, error) {
	rsp, err := c.IdentifySelf(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdentifySelfResponse(rsp)
}

// CredentialIssueWithBodyWithResponse request with arbitrary body returning *CredentialIssueResponse
func (c *ClientWithResponses) CredentialIssueWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CredentialIssueResponse, error) {
	rsp, err := c.CredentialIssueWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialIssueResponse(rsp)
}

func (c *ClientWithResponses) CredentialIssueWithResponse(ctx context.Context, body CredentialIssueJSONRequestBody, reqEditors ...RequestEditorFn) (*CredentialIssueResponse, error) {
	rsp, err := c.CredentialIssue(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialIssueResponse(rsp)
}

// CredentialPresentationExchangeWithResponse request returning *CredentialPresentationExchangeResponse
func (c *ClientWithResponses) CredentialPresentationExchangeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CredentialPresentationExchangeResponse, error) {
	rsp, err := c.CredentialPresentationExchange(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialPresentationExchangeResponse(rsp)
}

// CryptoGenerateKeyEd25519WithResponse request returning *CryptoGenerateKeyEd25519Response
func (c *ClientWithResponses) CryptoGenerateKeyEd25519WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoGenerateKeyEd25519Response, error) {
	rsp, err := c.CryptoGenerateKeyEd25519(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCryptoGenerateKeyEd25519Response(rsp)
}

// CryptoGenerateKeySecp256k1WithResponse request returning *CryptoGenerateKeySecp256k1Response
func (c *ClientWithResponses) CryptoGenerateKeySecp256k1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoGenerateKeySecp256k1Response, error) {
	rsp, err := c.CryptoGenerateKeySecp256k1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCryptoGenerateKeySecp256k1Response(rsp)
}

// CryptoGenerateKeySecp256r1WithResponse request returning *CryptoGenerateKeySecp256r1Response
func (c *ClientWithResponses) CryptoGenerateKeySecp256r1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoGenerateKeySecp256r1Response, error) {
	rsp, err := c.CryptoGenerateKeySecp256r1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCryptoGenerateKeySecp256r1Response(rsp)
}

// CryptoJoseJwkDecodeWithResponse request returning *CryptoJoseJwkDecodeResponse
func (c *ClientWithResponses) CryptoJoseJwkDecodeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoJoseJwkDecodeResponse, error) {
	rsp, err := c.CryptoJoseJwkDecode(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCryptoJoseJwkDecodeResponse(rsp)
}

// CryptoJoseJwkEncodeWithResponse request returning *CryptoJoseJwkEncodeResponse
func (c *ClientWithResponses) CryptoJoseJwkEncodeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoJoseJwkEncodeResponse, error) {
	rsp, err := c.CryptoJoseJwkEncode(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCryptoJoseJwkEncodeResponse(rsp)
}

// CryptoJoseJwsCreateWithResponse request returning *CryptoJoseJwsCreateResponse
func (c *ClientWithResponses) CryptoJoseJwsCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoJoseJwsCreateResponse, error) {
	rsp, err := c.CryptoJoseJwsCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCryptoJoseJwsCreateResponse(rsp)
}

// CryptoJoseJwsVerifyWithResponse request returning *CryptoJoseJwsVerifyResponse
func (c *ClientWithResponses) CryptoJoseJwsVerifyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoJoseJwsVerifyResponse, error) {
	rsp, err := c.CryptoJoseJwsVerify(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCryptoJoseJwsVerifyResponse(rsp)
}

// CryptoJoseJwtCreateWithResponse request returning *CryptoJoseJwtCreateResponse
func (c *ClientWithResponses) CryptoJoseJwtCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoJoseJwtCreateResponse, error) {
	rsp, err := c.CryptoJoseJwtCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCryptoJoseJwtCreateResponse(rsp)
}

// CryptoJoseJwtVerifyWithResponse request returning *CryptoJoseJwtVerifyResponse
func (c *ClientWithResponses) CryptoJoseJwtVerifyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoJoseJwtVerifyResponse, error) {
	rsp, err := c.CryptoJoseJwtVerify(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCryptoJoseJwtVerifyResponse(rsp)
}

// CryptoKeyManagerGenerateKeyWithResponse request returning *CryptoKeyManagerGenerateKeyResponse
func (c *ClientWithResponses) CryptoKeyManagerGenerateKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoKeyManagerGenerateKeyResponse, error) {
	rsp, err := c.CryptoKeyManagerGenerateKey(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCryptoKeyManagerGenerateKeyResponse(rsp)
}

// CryptoKeyManagerImportKeyWithResponse request returning *CryptoKeyManagerImportKeyResponse
func (c *ClientWithResponses) CryptoKeyManagerImportKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoKeyManagerImportKeyResponse, error) {
	rsp, err := c.CryptoKeyManagerImportKey(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCryptoKeyManagerImportKeyResponse(rsp)
}

// CryptoKeyManagerSignWithResponse request returning *CryptoKeyManagerSignResponse
func (c *ClientWithResponses) CryptoKeyManagerSignWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoKeyManagerSignResponse, error) {
	rsp, err := c.CryptoKeyManagerSign(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCryptoKeyManagerSignResponse(rsp)
}

// CryptoKeyManagerVerifyWithResponse request returning *CryptoKeyManagerVerifyResponse
func (c *ClientWithResponses) CryptoKeyManagerVerifyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoKeyManagerVerifyResponse, error) {
	rsp, err := c.CryptoKeyManagerVerify(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCryptoKeyManagerVerifyResponse(rsp)
}

// CryptoVerifyEd25519WithResponse request returning *CryptoVerifyEd25519Response
func (c *ClientWithResponses) CryptoVerifyEd25519WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoVerifyEd25519Response, error) {
	rsp, err := c.CryptoVerifyEd25519(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCryptoVerifyEd25519Response(rsp)
}

// CryptoVerifySecp256k1WithResponse request returning *CryptoVerifySecp256k1Response
func (c *ClientWithResponses) CryptoVerifySecp256k1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoVerifySecp256k1Response, error) {
	rsp, err := c.CryptoVerifySecp256k1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCryptoVerifySecp256k1Response(rsp)
}

// CryptoVerifySecp256r1WithResponse request returning *CryptoVerifySecp256r1Response
func (c *ClientWithResponses) CryptoVerifySecp256r1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CryptoVerifySecp256r1Response, error) {
	rsp, err := c.CryptoVerifySecp256r1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCryptoVerifySecp256r1Response(rsp)
}

// DidIonAnchorWithResponse request returning *DidIonAnchorResponse
func (c *ClientWithResponses) DidIonAnchorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DidIonAnchorResponse, error) {
	rsp, err := c.DidIonAnchor(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDidIonAnchorResponse(rsp)
}

// DidIonCreateWithResponse request returning *DidIonCreateResponse
func (c *ClientWithResponses) DidIonCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DidIonCreateResponse, error) {
	rsp, err := c.DidIonCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDidIonCreateResponse(rsp)
}

// DidIonDeactivateWithResponse request returning *DidIonDeactivateResponse
func (c *ClientWithResponses) DidIonDeactivateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DidIonDeactivateResponse, error) {
	rsp, err := c.DidIonDeactivate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDidIonDeactivateResponse(rsp)
}

// DidIonRecoverWithResponse request returning *DidIonRecoverResponse
func (c *ClientWithResponses) DidIonRecoverWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DidIonRecoverResponse, error) {
	rsp, err := c.DidIonRecover(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDidIonRecoverResponse(rsp)
}

// DidIonResolveWithResponse request returning *DidIonResolveResponse
func (c *ClientWithResponses) DidIonResolveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DidIonResolveResponse, error) {
	rsp, err := c.DidIonResolve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDidIonResolveResponse(rsp)
}

// DidIonUpdateWithResponse request returning *DidIonUpdateResponse
func (c *ClientWithResponses) DidIonUpdateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DidIonUpdateResponse, error) {
	rsp, err := c.DidIonUpdate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDidIonUpdateResponse(rsp)
}

// DidKeyCreateWithResponse request returning *DidKeyCreateResponse
func (c *ClientWithResponses) DidKeyCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DidKeyCreateResponse, error) {
	rsp, err := c.DidKeyCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDidKeyCreateResponse(rsp)
}

// DidKeyResolveWithResponse request returning *DidKeyResolveResponse
func (c *ClientWithResponses) DidKeyResolveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DidKeyResolveResponse, error) {
	rsp, err := c.DidKeyResolve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDidKeyResolveResponse(rsp)
}

// EncodersBase58DecodeWithBodyWithResponse request with arbitrary body returning *EncodersBase58DecodeResponse
func (c *ClientWithResponses) EncodersBase58DecodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EncodersBase58DecodeResponse, error) {
	rsp, err := c.EncodersBase58DecodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEncodersBase58DecodeResponse(rsp)
}

func (c *ClientWithResponses) EncodersBase58DecodeWithResponse(ctx context.Context, body EncodersBase58DecodeJSONRequestBody, reqEditors ...RequestEditorFn) (*EncodersBase58DecodeResponse, error) {
	rsp, err := c.EncodersBase58Decode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEncodersBase58DecodeResponse(rsp)
}

// EncodersBase58EncodeWithBodyWithResponse request with arbitrary body returning *EncodersBase58EncodeResponse
func (c *ClientWithResponses) EncodersBase58EncodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EncodersBase58EncodeResponse, error) {
	rsp, err := c.EncodersBase58EncodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEncodersBase58EncodeResponse(rsp)
}

func (c *ClientWithResponses) EncodersBase58EncodeWithResponse(ctx context.Context, body EncodersBase58EncodeJSONRequestBody, reqEditors ...RequestEditorFn) (*EncodersBase58EncodeResponse, error) {
	rsp, err := c.EncodersBase58Encode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEncodersBase58EncodeResponse(rsp)
}

// EncodersBase64DecodeWithBodyWithResponse request with arbitrary body returning *EncodersBase64DecodeResponse
func (c *ClientWithResponses) EncodersBase64DecodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EncodersBase64DecodeResponse, error) {
	rsp, err := c.EncodersBase64DecodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEncodersBase64DecodeResponse(rsp)
}

func (c *ClientWithResponses) EncodersBase64DecodeWithResponse(ctx context.Context, body EncodersBase64DecodeJSONRequestBody, reqEditors ...RequestEditorFn) (*EncodersBase64DecodeResponse, error) {
	rsp, err := c.EncodersBase64Decode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEncodersBase64DecodeResponse(rsp)
}

// EncodersBase64EncodeWithBodyWithResponse request with arbitrary body returning *EncodersBase64EncodeResponse
func (c *ClientWithResponses) EncodersBase64EncodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EncodersBase64EncodeResponse, error) {
	rsp, err := c.EncodersBase64EncodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEncodersBase64EncodeResponse(rsp)
}

func (c *ClientWithResponses) EncodersBase64EncodeWithResponse(ctx context.Context, body EncodersBase64EncodeJSONRequestBody, reqEditors ...RequestEditorFn) (*EncodersBase64EncodeResponse, error) {
	rsp, err := c.EncodersBase64Encode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEncodersBase64EncodeResponse(rsp)
}

// EncodersCborDecodeWithBodyWithResponse request with arbitrary body returning *EncodersCborDecodeResponse
func (c *ClientWithResponses) EncodersCborDecodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EncodersCborDecodeResponse, error) {
	rsp, err := c.EncodersCborDecodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEncodersCborDecodeResponse(rsp)
}

func (c *ClientWithResponses) EncodersCborDecodeWithResponse(ctx context.Context, body EncodersCborDecodeJSONRequestBody, reqEditors ...RequestEditorFn) (*EncodersCborDecodeResponse, error) {
	rsp, err := c.EncodersCborDecode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEncodersCborDecodeResponse(rsp)
}

// EncodersCborEncodeWithBodyWithResponse request with arbitrary body returning *EncodersCborEncodeResponse
func (c *ClientWithResponses) EncodersCborEncodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EncodersCborEncodeResponse, error) {
	rsp, err := c.EncodersCborEncodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEncodersCborEncodeResponse(rsp)
}

func (c *ClientWithResponses) EncodersCborEncodeWithResponse(ctx context.Context, body EncodersCborEncodeJSONRequestBody, reqEditors ...RequestEditorFn) (*EncodersCborEncodeResponse, error) {
	rsp, err := c.EncodersCborEncode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEncodersCborEncodeResponse(rsp)
}

// EncodersSha256EncodeWithBodyWithResponse request with arbitrary body returning *EncodersSha256EncodeResponse
func (c *ClientWithResponses) EncodersSha256EncodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EncodersSha256EncodeResponse, error) {
	rsp, err := c.EncodersSha256EncodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEncodersSha256EncodeResponse(rsp)
}

func (c *ClientWithResponses) EncodersSha256EncodeWithResponse(ctx context.Context, body EncodersSha256EncodeJSONRequestBody, reqEditors ...RequestEditorFn) (*EncodersSha256EncodeResponse, error) {
	rsp, err := c.EncodersSha256Encode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEncodersSha256EncodeResponse(rsp)
}

// ServerReadyWithResponse request returning *ServerReadyResponse
func (c *ClientWithResponses) ServerReadyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ServerReadyResponse, error) {
	rsp, err := c.ServerReady(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServerReadyResponse(rsp)
}

// ServerShutdownWithResponse request returning *ServerShutdownResponse
func (c *ClientWithResponses) ServerShutdownWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ServerShutdownResponse, error) {
	rsp, err := c.ServerShutdown(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServerShutdownResponse(rsp)
}

// ParseIdentifySelfResponse parses an HTTP response from a IdentifySelfWithResponse call
func ParseIdentifySelfResponse(rsp *http.Response) (*IdentifySelfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IdentifySelfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestServerID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCredentialIssueResponse parses an HTTP response from a CredentialIssueWithResponse call
func ParseCredentialIssueResponse(rsp *http.Response) (*CredentialIssueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialIssueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialIssuanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCredentialPresentationExchangeResponse parses an HTTP response from a CredentialPresentationExchangeWithResponse call
func ParseCredentialPresentationExchangeResponse(rsp *http.Response) (*CredentialPresentationExchangeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialPresentationExchangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCryptoGenerateKeyEd25519Response parses an HTTP response from a CryptoGenerateKeyEd25519WithResponse call
func ParseCryptoGenerateKeyEd25519Response(rsp *http.Response) (*CryptoGenerateKeyEd25519Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CryptoGenerateKeyEd25519Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCryptoGenerateKeySecp256k1Response parses an HTTP response from a CryptoGenerateKeySecp256k1WithResponse call
func ParseCryptoGenerateKeySecp256k1Response(rsp *http.Response) (*CryptoGenerateKeySecp256k1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CryptoGenerateKeySecp256k1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCryptoGenerateKeySecp256r1Response parses an HTTP response from a CryptoGenerateKeySecp256r1WithResponse call
func ParseCryptoGenerateKeySecp256r1Response(rsp *http.Response) (*CryptoGenerateKeySecp256r1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CryptoGenerateKeySecp256r1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCryptoJoseJwkDecodeResponse parses an HTTP response from a CryptoJoseJwkDecodeWithResponse call
func ParseCryptoJoseJwkDecodeResponse(rsp *http.Response) (*CryptoJoseJwkDecodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CryptoJoseJwkDecodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCryptoJoseJwkEncodeResponse parses an HTTP response from a CryptoJoseJwkEncodeWithResponse call
func ParseCryptoJoseJwkEncodeResponse(rsp *http.Response) (*CryptoJoseJwkEncodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CryptoJoseJwkEncodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCryptoJoseJwsCreateResponse parses an HTTP response from a CryptoJoseJwsCreateWithResponse call
func ParseCryptoJoseJwsCreateResponse(rsp *http.Response) (*CryptoJoseJwsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CryptoJoseJwsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCryptoJoseJwsVerifyResponse parses an HTTP response from a CryptoJoseJwsVerifyWithResponse call
func ParseCryptoJoseJwsVerifyResponse(rsp *http.Response) (*CryptoJoseJwsVerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CryptoJoseJwsVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCryptoJoseJwtCreateResponse parses an HTTP response from a CryptoJoseJwtCreateWithResponse call
func ParseCryptoJoseJwtCreateResponse(rsp *http.Response) (*CryptoJoseJwtCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CryptoJoseJwtCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCryptoJoseJwtVerifyResponse parses an HTTP response from a CryptoJoseJwtVerifyWithResponse call
func ParseCryptoJoseJwtVerifyResponse(rsp *http.Response) (*CryptoJoseJwtVerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CryptoJoseJwtVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCryptoKeyManagerGenerateKeyResponse parses an HTTP response from a CryptoKeyManagerGenerateKeyWithResponse call
func ParseCryptoKeyManagerGenerateKeyResponse(rsp *http.Response) (*CryptoKeyManagerGenerateKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CryptoKeyManagerGenerateKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCryptoKeyManagerImportKeyResponse parses an HTTP response from a CryptoKeyManagerImportKeyWithResponse call
func ParseCryptoKeyManagerImportKeyResponse(rsp *http.Response) (*CryptoKeyManagerImportKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CryptoKeyManagerImportKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCryptoKeyManagerSignResponse parses an HTTP response from a CryptoKeyManagerSignWithResponse call
func ParseCryptoKeyManagerSignResponse(rsp *http.Response) (*CryptoKeyManagerSignResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CryptoKeyManagerSignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCryptoKeyManagerVerifyResponse parses an HTTP response from a CryptoKeyManagerVerifyWithResponse call
func ParseCryptoKeyManagerVerifyResponse(rsp *http.Response) (*CryptoKeyManagerVerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CryptoKeyManagerVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCryptoVerifyEd25519Response parses an HTTP response from a CryptoVerifyEd25519WithResponse call
func ParseCryptoVerifyEd25519Response(rsp *http.Response) (*CryptoVerifyEd25519Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CryptoVerifyEd25519Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCryptoVerifySecp256k1Response parses an HTTP response from a CryptoVerifySecp256k1WithResponse call
func ParseCryptoVerifySecp256k1Response(rsp *http.Response) (*CryptoVerifySecp256k1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CryptoVerifySecp256k1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCryptoVerifySecp256r1Response parses an HTTP response from a CryptoVerifySecp256r1WithResponse call
func ParseCryptoVerifySecp256r1Response(rsp *http.Response) (*CryptoVerifySecp256r1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CryptoVerifySecp256r1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDidIonAnchorResponse parses an HTTP response from a DidIonAnchorWithResponse call
func ParseDidIonAnchorResponse(rsp *http.Response) (*DidIonAnchorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DidIonAnchorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDidIonCreateResponse parses an HTTP response from a DidIonCreateWithResponse call
func ParseDidIonCreateResponse(rsp *http.Response) (*DidIonCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DidIonCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DIDIonCreateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDidIonDeactivateResponse parses an HTTP response from a DidIonDeactivateWithResponse call
func ParseDidIonDeactivateResponse(rsp *http.Response) (*DidIonDeactivateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DidIonDeactivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDidIonRecoverResponse parses an HTTP response from a DidIonRecoverWithResponse call
func ParseDidIonRecoverResponse(rsp *http.Response) (*DidIonRecoverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DidIonRecoverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDidIonResolveResponse parses an HTTP response from a DidIonResolveWithResponse call
func ParseDidIonResolveResponse(rsp *http.Response) (*DidIonResolveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DidIonResolveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDidIonUpdateResponse parses an HTTP response from a DidIonUpdateWithResponse call
func ParseDidIonUpdateResponse(rsp *http.Response) (*DidIonUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DidIonUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDidKeyCreateResponse parses an HTTP response from a DidKeyCreateWithResponse call
func ParseDidKeyCreateResponse(rsp *http.Response) (*DidKeyCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DidKeyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDidKeyResolveResponse parses an HTTP response from a DidKeyResolveWithResponse call
func ParseDidKeyResolveResponse(rsp *http.Response) (*DidKeyResolveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DidKeyResolveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEncodersBase58DecodeResponse parses an HTTP response from a EncodersBase58DecodeWithResponse call
func ParseEncodersBase58DecodeResponse(rsp *http.Response) (*EncodersBase58DecodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EncodersBase58DecodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StringEncodedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEncodersBase58EncodeResponse parses an HTTP response from a EncodersBase58EncodeWithResponse call
func ParseEncodersBase58EncodeResponse(rsp *http.Response) (*EncodersBase58EncodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EncodersBase58EncodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StringEncodedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEncodersBase64DecodeResponse parses an HTTP response from a EncodersBase64DecodeWithResponse call
func ParseEncodersBase64DecodeResponse(rsp *http.Response) (*EncodersBase64DecodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EncodersBase64DecodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StringEncodedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEncodersBase64EncodeResponse parses an HTTP response from a EncodersBase64EncodeWithResponse call
func ParseEncodersBase64EncodeResponse(rsp *http.Response) (*EncodersBase64EncodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EncodersBase64EncodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StringEncodedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEncodersCborDecodeResponse parses an HTTP response from a EncodersCborDecodeWithResponse call
func ParseEncodersCborDecodeResponse(rsp *http.Response) (*EncodersCborDecodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EncodersCborDecodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StringEncodedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEncodersCborEncodeResponse parses an HTTP response from a EncodersCborEncodeWithResponse call
func ParseEncodersCborEncodeResponse(rsp *http.Response) (*EncodersCborEncodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EncodersCborEncodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StringEncodedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEncodersSha256EncodeResponse parses an HTTP response from a EncodersSha256EncodeWithResponse call
func ParseEncodersSha256EncodeResponse(rsp *http.Response) (*EncodersSha256EncodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EncodersSha256EncodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StringEncodedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseServerReadyResponse parses an HTTP response from a ServerReadyWithResponse call
func ParseServerReadyResponse(rsp *http.Response) (*ServerReadyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServerReadyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseServerShutdownResponse parses an HTTP response from a ServerShutdownWithResponse call
func ParseServerShutdownResponse(rsp *http.Response) (*ServerShutdownResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServerShutdownResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
